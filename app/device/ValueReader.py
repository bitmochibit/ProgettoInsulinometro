import asyncio

from backend.AppState import AppState
from backend.Scheduler import Scheduler
from backend.container.Container import Container
from backend.device.DeviceProperty import DeviceProperty
from backend.events.ApplicationMessagesEnum import ApplicationMessagesEnum
from backend.events.EventBus import EventBus


class ValueReader:
    """ This class repeatedly reads the value from the connected device and calls the callback function with the value. """

    def __init__(self):
        self.running = False
        self.device_controller = Container.device_container.device_controller()
        self.current_device = None
        self.event_bus = EventBus()
        self.event_loop = Scheduler().event_loop
        self._current_task = None  # Keep track of the task

    def start(self):
        """ Start the reading process. """
        if self.running:
            print("Already running.")
            return

        if AppState().connected_device is None:
            print("No device connected.")
            return

        self.current_device = AppState().connected_device
        self.running = True
        self._current_task = Scheduler().run_async(self._read_value())

    def stop(self):
        """ Stop the reading process. """
        self.running = False
        if self._current_task:
            Scheduler().stop_task(self._current_task)
            self._current_task = None

    async def _read_value(self):
        """ Read the value from the connected device. """
        # This code only reads the "frequency" property from the device. (which is a random number generated by the device)
        try:
            while self.running:
                print('Writing "read" command to device...')
                await self.device_controller.write_data_async(self.current_device, None, b'read\n')
                print('Reading value from device...')
                data = await self.device_controller.read_data_async(self.current_device, DeviceProperty.FREQUENCY)
                print('Value read:', data)
                if data is not None:
                    self.event_bus.dispatch(ApplicationMessagesEnum.ON_TEMPERATURE_READ, data)
        except asyncio.CancelledError:
            print("ValueReader task was cancelled.")
        except Exception as e:
            print(f"Error in ValueReader: {e}")
        finally:
            self.running = False
