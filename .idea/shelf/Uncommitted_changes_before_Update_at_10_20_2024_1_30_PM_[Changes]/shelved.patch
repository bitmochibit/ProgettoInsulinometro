Index: app/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\nimport tkinter.font\r\nfrom tkinter import Widget\r\nfrom typing import Union, Optional, Tuple, Callable, Any\r\n\r\nimport customtkinter as ctk\r\nfrom CTkMenuBar import CTkTitleMenu\r\nfrom customtkinter import CTkFrame, CTkImage, CTkEntry, CTkFont, CTkTabview, CTkButton, CTkSegmentedButton, CTkCanvas\r\nimport colorsys\r\n\r\n\r\n# from PIL import Image, ImageDraw, ImageFont\r\n\r\n\r\ndef scale_lightness(hexStr, scale_l):\r\n\t# Convert hexStr to rgb (tuple of 3 floats)\r\n\trgb = [int(hexStr[i:i + 2], 16) / 255.0 for i in range(1, 6, 2)]\r\n\th, l, s = colorsys.rgb_to_hls(*rgb)\r\n\t# manipulate h, l, s values and return as rgb\r\n\tnew_rgb = colorsys.hls_to_rgb(h, min(1, l * scale_l), s=s)\r\n\treturn \"#\" + \"\".join(f\"{int(255 * x):02x}\" for x in new_rgb)\r\n\r\n\r\n# emoji come icone temporanee\r\n\r\n# Classe per la definizione statica del tema, sara' possibile estenderla per sovrascrivere i colori\r\nclass AppTheme:\r\n\tdef __init__(self,\r\n\t             transparent=\"transparent\",\r\n\r\n\t             primary_background=\"#F9F8FD\",\r\n\t             secondary_background=\"#F1F2F7\",\r\n\t             element_background=\"#FFFFFF\",\r\n\t             element_secondary_background=\"#F3EDF7\",\r\n\r\n\t             primary_text=\"#1D1E4D\",\r\n\t             secondary_text=\"#535178\",\r\n\t             light_text=\"#FFFFFF\",\r\n\t             gray_text=\"#434242\",\r\n\t             light_gray_text=\"#CAC4D0\",\r\n\r\n\t             primary_button=\"#EBFFFC\",\r\n\t             primary_button_text=\"#003830\",\r\n\r\n\t             warning_button=\"#FFF9EB\",\r\n\t             warning_button_text=\"#422E00\",\r\n\r\n\t             danger_button=\"#FFEBEF\",\r\n\t             danger_button_text=\"#800019\",\r\n\r\n\t             ):\r\n\t\tself.transparent = transparent\r\n\r\n\t\tself.primary_background = primary_background\r\n\t\tself.secondary_background = secondary_background\r\n\t\tself.element_background = element_background\r\n\t\tself.element_secondary_background = element_secondary_background\r\n\r\n\t\tself.primary_text = primary_text\r\n\t\tself.secondary_text = secondary_text\r\n\t\tself.light_text = light_text\r\n\t\tself.gray_text = gray_text\r\n\t\tself.light_gray_text = light_gray_text\r\n\r\n\t\tself.primary_button = primary_button\r\n\t\tself.primary_button_text = primary_button_text\r\n\r\n\t\tself.warning_button = warning_button\r\n\t\tself.warning_button_text = warning_button_text\r\n\r\n\t\tself.danger_button = danger_button\r\n\t\tself.danger_button_text = danger_button_text\r\n\t\tpass\r\n\r\n\r\n# Classe estesa per il menu personalizzato, per qualche strano motivo quello di base supporta solo il testo \uD83C\uDF61\r\nclass ExtendedTitleMenu(CTkTitleMenu):\r\n\tdef __init__(self,\r\n\t             master,\r\n\t             title_bar_color=0xFFFFFF,\r\n\t             padx: int = 10,\r\n\t             width: int = 10,\r\n\t             x_offset: int = None,\r\n\t             y_offset: int = None,\r\n\t             app_theme: AppTheme = AppTheme()\r\n\t             ):\r\n\t\tsuper().__init__(master, title_bar_color, padx, width, x_offset, y_offset)\r\n\t\tself.app_theme = app_theme\r\n\r\n\tdef add_frame(self, frame: CTkFrame):\r\n\t\tframe.grid(row=0, column=self.num, padx=(0, self.padding))\r\n\r\n\r\n# Classe estesa per il tabview di customtkinter, che quella base fa un po' schifo \uD83C\uDF61\r\nclass ExtendedTabView(CTkTabview):\r\n\tDEFAULT_UNDERLINE_WIDTH = 4\r\n\tDEFAULT_SELECTED_STYLE = None\r\n\r\n\tdef __init__(self,\r\n\t             master: Any,\r\n\t             width: int = 300,\r\n\t             height: int = 250,\r\n\t             corner_radius: Optional[int] = None,\r\n\t             border_width: Optional[int] = None,\r\n\t             bg_color: Union[str, Tuple[str, str]] = \"transparent\",\r\n\t             fg_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             border_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_fg_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_selected_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_selected_hover_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_unselected_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_unselected_hover_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             segmented_button_font: Optional[CTkFont] = None,\r\n\t             segmented_button_background_corner_colors: Optional[Tuple[str, str, str, str]] = None,\r\n\t             segmented_button_height: Optional[int] = None,\r\n\t             segmented_button_width: Optional[int] = None,\r\n\t             segmented_button_padding_x: Union[float, Tuple[float, float]] = 0.0,\r\n\t             segmented_button_padding_y: Union[float, Tuple[float, float]] = 0.0,\r\n\t             segmented_button_sticky: Optional[str] = None,\r\n\t             segmented_button_row: Optional[int] = None,\r\n\t             segmented_button_column: Optional[int] = None,\r\n\t             button_padding_x: Union[float, Tuple[float, float]] = 0.0,\r\n\t             button_padding_y: Union[float, Tuple[float, float]] = 0.0,\r\n\t             selected_style: Optional[str] = None,\r\n\t             selected_style_color: Optional[str] = None,\r\n\t             underline_width: int = DEFAULT_UNDERLINE_WIDTH,\r\n\t             text_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             text_hover_color: Optional[str] = None,\r\n\t             text_color_unselected: Optional[str] = None,\r\n\t             text_color_disabled: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t             command: Union[Callable, Any] = None,\r\n\t             anchor: str = \"center\",\r\n\t             state: str = \"normal\",\r\n\t             app_theme: AppTheme = AppTheme(),\r\n\t             **kwargs):\r\n\t\tsuper().__init__(master, width, height, corner_radius, border_width, bg_color, fg_color, border_color,\r\n\t\t                 segmented_button_fg_color, segmented_button_selected_color,\r\n\t\t                 segmented_button_selected_hover_color,\r\n\t\t                 segmented_button_unselected_color, segmented_button_unselected_hover_color, text_color,\r\n\t\t                 text_color_disabled, command, anchor, state, **kwargs)\r\n\r\n\t\tself.segmented_button: CTkSegmentedButton | None = self.children.get(\"!ctksegmentedbutton\")\r\n\t\tself._app_theme = app_theme\r\n\r\n\t\t# Style and layout settings\r\n\t\tself._selected_style = selected_style or self.DEFAULT_SELECTED_STYLE\r\n\t\tself._selected_style_color = selected_style_color\r\n\t\tself._text_color = text_color\r\n\t\tself._text_color_unselected = text_color_unselected or text_color\r\n\t\tself._text_hover_color = text_hover_color\r\n\t\tself._underline_width = underline_width\r\n\r\n\t\tself._segmented_button_font = segmented_button_font\r\n\t\tself._segmented_button_background_corner_colors = segmented_button_background_corner_colors\r\n\t\tself._segmented_button_height = segmented_button_height\r\n\t\tself._segmented_button_width = segmented_button_width\r\n\t\tself._segmented_button_sticky = segmented_button_sticky\r\n\t\tself._segmented_button_row = segmented_button_row\r\n\t\tself._segmented_button_column = segmented_button_column\r\n\r\n\t\t# Button layout settings\r\n\t\tself._button_padding_x = button_padding_x\r\n\t\tself._button_padding_y = button_padding_y\r\n\t\tself._segmented_button_padding_x = segmented_button_padding_x\r\n\t\tself._segmented_button_padding_y = segmented_button_padding_y\r\n\r\n\t\t# Maintain button states and underlines\r\n\t\tself._button_underlines = {}\r\n\t\tself._binded_buttons = {}\r\n\r\n\t\tself._initialize_buttons()\r\n\r\n\tdef _initialize_buttons(self):\r\n\t\t\"\"\"Initial setup for buttons and their event bindings.\"\"\"\r\n\t\tif not self.segmented_button:\r\n\t\t\treturn\r\n\r\n\t\t# Apply configuration for segmented button\r\n\t\tself.segmented_button.configure(\r\n\t\t\tfont=self._segmented_button_font,\r\n\t\t\tbackground_corner_colors=self._segmented_button_background_corner_colors,\r\n\t\t\theight=self._segmented_button_height,\r\n\t\t\twidth=self._segmented_button_width,\r\n\t\t)\r\n\t\tself.segmented_button.grid_configure(\r\n\t\t\tpadx=self._segmented_button_padding_x,\r\n\t\t\tpady=self._segmented_button_padding_y,\r\n\t\t\tsticky=self._segmented_button_sticky,\r\n\t\t\trow=self._segmented_button_row,\r\n\t\t\tcolumn=self._segmented_button_column\r\n\t\t)\r\n\r\n\t\t# Initialize each button in segmented button\r\n\t\tfor button in self.segmented_button._buttons_dict.values():\r\n\t\t\tself._setup_button(button)\r\n\r\n\tdef _setup_button(self, button: CTkButton):\r\n\t\t\"\"\"Setup button: bind events and style.\"\"\"\r\n\t\tbutton.grid_configure(padx=self._button_padding_x, pady=self._button_padding_y)\r\n\t\tif button not in self._binded_buttons:\r\n\t\t\tself._bind_button_events(button)\r\n\t\t\tself._binded_buttons[button] = True\r\n\t\tself._update_button_style(button)\r\n\t\tself._apply_selected_style(button) if button.cget(\"text\") == self._current_name else None\r\n\r\n\tdef _bind_button_events(self, button: CTkButton):\r\n\t\t\"\"\"Bind hover and click events for a button.\"\"\"\r\n\t\tbutton.bind(\"<Enter>\", lambda e: button.configure(text_color=self._text_hover_color) if self._text_hover_color else None)\r\n\t\tbutton.bind(\"<Leave>\", lambda e: button.configure(text_color=self._get_button_text_color(button)))\r\n\t\tbutton.bind(\"<Button-1>\", lambda e: self._on_button_click(button))\r\n\r\n\tdef _on_button_click(self, button: CTkButton):\r\n\t\t\"\"\"Handle button click: apply selected style and update other buttons.\"\"\"\r\n\t\tself._apply_selected_style(button)\r\n\t\tfor btn in self._binded_buttons.keys():\r\n\t\t\tself._update_button_style(btn)\r\n\r\n\tdef _apply_selected_style(self, button: CTkButton):\r\n\t\t\"\"\"Apply the selected style to the clicked button.\"\"\"\r\n\t\tif self._selected_style == \"underline\":\r\n\t\t\tself._set_selected_underline(button)\r\n\r\n\tdef _set_selected_underline(self, button: CTkButton):\r\n\t\t\"\"\"Set an underline for the selected button.\"\"\"\r\n\t\tfor btn, canvas in self._button_underlines.items():\r\n\t\t\tcanvas.place_forget() if canvas else None  # Hide all underlines\r\n\r\n\t\tbutton.update_idletasks()\r\n\r\n\t\tcanvas = self._button_underlines.get(button)\r\n\t\tif not canvas:\r\n\t\t\tcanvas = CTkCanvas(button, width=button.winfo_reqwidth(), height=self._underline_width, highlightthickness=0)\r\n\t\t\tself._button_underlines[button] = canvas\r\n\r\n\t\t# Create and place underline\r\n\t\tcanvas.delete(\"all\")\r\n\t\tcanvas.create_line(0, 0, button.winfo_reqwidth(), 0, fill=self._selected_style_color,\r\n\t\t                   width=self._underline_width, capstyle=\"round\")\r\n\t\tcanvas.place(x=0, y=button.winfo_reqheight() - self._underline_width)\r\n\r\n\tdef _update_button_style(self, button: CTkButton):\r\n\t\t\"\"\"Update text color of the button based on selection.\"\"\"\r\n\t\tis_selected = button.cget(\"text\") == self._current_name\r\n\t\tbutton.configure(text_color=self._text_color if is_selected else self._text_color_unselected)\r\n\r\n\tdef _get_button_text_color(self, button: CTkButton) -> str:\r\n\t\t\"\"\"Return appropriate text color for hover/leave events.\"\"\"\r\n\t\treturn self._text_color if button.cget(\"text\") == self._current_name else self._text_color_unselected\r\n\r\n\tdef add(self, text: str) -> CTkFrame:\r\n\t\t\"\"\"Add a new tab and update button styles.\"\"\"\r\n\t\tframe = super().add(text)\r\n\t\tself._initialize_buttons()  # Ensure new buttons are properly initialized\r\n\t\treturn frame\r\n\r\n\tdef set(self, text: str):\r\n\t\t\"\"\"Set the currently selected tab.\"\"\"\r\n\t\tsuper().set(text)\r\n\t\tself._initialize_buttons()\r\n\r\n\r\n\r\n# Elementi\r\n\r\n# def emoji(emoji, size=32):\r\n# \tfont = ImageFont.truetype(\"seguiemj.ttf\", size=int(size / 1.5))\r\n# \timg = Image.new(\"RGBA\", (size, size), (0, 0, 0, 0))\r\n# \tdraw = ImageDraw.Draw(img)\r\n# \tdraw.text((size / 2, size / 2), emoji,\r\n# \t          embedded_color=True, font=font, anchor=\"mm\")\r\n# \timg = CTkImage(img, size=(size, size))\r\n# \treturn img\r\n\r\n\r\nclass LabelledInput(CTkEntry):\r\n\tclass EntryOptions:\r\n\t\tdef __init__(self,\r\n\t\t             width: int = 140,\r\n\t\t             height: int = 28,\r\n\t\t             corner_radius: Optional[int] = None,\r\n\t\t             border_width: Optional[int] = None,\r\n\r\n\t\t             bg_color: Union[str, Tuple[str, str]] = \"transparent\",\r\n\t\t             fg_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t\t             border_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t\t             text_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t\t             placeholder_text_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\r\n\t\t             textvariable: Union[ctk.Variable, None] = None,\r\n\t\t             placeholder_text: Union[str, None] = None,\r\n\t\t             font: Optional[Union[tuple, CTkFont]] = None,\r\n\t\t             state: str = ctk.NORMAL,\r\n\t\t             **kwargs):\r\n\t\t\tself.width = width\r\n\t\t\tself.height = height\r\n\t\t\tself.corner_radius = corner_radius\r\n\t\t\tself.border_width = border_width\r\n\t\t\tself.bg_color = bg_color\r\n\t\t\tself.fg_color = fg_color\r\n\t\t\tself.border_color = border_color\r\n\t\t\tself.text_color = text_color\r\n\t\t\tself.placeholder_text_color = placeholder_text_color\r\n\t\t\tself.textvariable = textvariable\r\n\t\t\tself.placeholder_text = placeholder_text\r\n\t\t\tself.font = font\r\n\t\t\tself.state = state\r\n\t\t\tself.kwargs = kwargs\r\n\r\n\tclass LabelOptions:\r\n\t\tdef __init__(self,\r\n\t\t             width: int = 0,\r\n\t\t             height: int = 28,\r\n\t\t             corner_radius: Optional[int] = None,\r\n\r\n\t\t             bg_color: Union[str, Tuple[str, str]] = \"transparent\",\r\n\t\t             fg_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t\t             text_color: Optional[Union[str, Tuple[str, str]]] = None,\r\n\t\t             text_color_disabled: Optional[Union[str, Tuple[str, str]]] = None,\r\n\r\n\t\t             text: str = \"CTkLabel\",\r\n\t\t             font: Optional[Union[tuple, CTkFont]] = None,\r\n\t\t             image: Union[CTkImage, None] = None,\r\n\t\t             compound: str = \"center\",\r\n\t\t             anchor: str = \"w\",  # label anchor: center, n, e, s, w\r\n\t\t             wraplength: int = 0,\r\n\t\t             **kwargs):\r\n\t\t\tself.width = width\r\n\t\t\tself.height = height\r\n\t\t\tself.corner_radius = corner_radius\r\n\t\t\tself.bg_color = bg_color\r\n\t\t\tself.fg_color = fg_color\r\n\t\t\tself.text_color = text_color\r\n\t\t\tself.text_color_disabled = text_color_disabled\r\n\t\t\tself.text = text\r\n\t\t\tself.font = font\r\n\t\t\tself.image = image\r\n\t\t\tself.compound = compound\r\n\t\t\tself.anchor = anchor\r\n\t\t\tself.wraplength = wraplength\r\n\t\t\tself.kwargs = kwargs\r\n\r\n\tdef __init__(self,\r\n\t             master,\r\n\t             entry_options: EntryOptions = EntryOptions(),\r\n\t             label_options: LabelOptions = LabelOptions(),\r\n\t             app_theme: AppTheme = AppTheme(),\r\n\t             **kwargs):\r\n\t\tsuper().__init__(master, **kwargs)\r\n\t\tself.current_input_variable = entry_options.textvariable\r\n\t\tself.container = ctk.CTkFrame(master, fg_color=\"transparent\", **kwargs)\r\n\t\tself.input = ctk.CTkEntry(self.container,\r\n\t\t                          width=entry_options.width,\r\n\t\t                          height=entry_options.height,\r\n\t\t                          corner_radius=entry_options.corner_radius,\r\n\t\t                          border_width=entry_options.border_width,\r\n\t\t                          bg_color=entry_options.bg_color,\r\n\t\t                          fg_color=entry_options.fg_color if entry_options.fg_color is not None else app_theme.element_background,\r\n\t\t                          border_color=entry_options.border_color,\r\n\t\t                          text_color=entry_options.text_color,\r\n\t\t                          placeholder_text_color=entry_options.placeholder_text_color,\r\n\t\t                          placeholder_text=entry_options.placeholder_text,\r\n\t\t                          font=entry_options.font,\r\n\t\t                          state=entry_options.state,\r\n\t\t                          **entry_options.kwargs\r\n\t\t                          )\r\n\t\tself.label = ctk.CTkLabel(self.container,\r\n\t\t                          width=label_options.width,\r\n\t\t                          height=label_options.height,\r\n\t\t                          corner_radius=label_options.corner_radius,\r\n\t\t                          bg_color=label_options.bg_color,\r\n\t\t                          fg_color=label_options.fg_color,\r\n\t\t                          text_color=label_options.text_color,\r\n\t\t                          text_color_disabled=label_options.text_color_disabled,\r\n\t\t                          text=label_options.text,\r\n\t\t                          font=label_options.font,\r\n\t\t                          image=label_options.image,\r\n\t\t                          compound=label_options.compound,\r\n\t\t                          anchor=label_options.anchor,\r\n\t\t                          wraplength=label_options.wraplength,\r\n\t\t                          **label_options.kwargs\r\n\t\t                          )\r\n\t\tif entry_options.textvariable is not None:\r\n\t\t\t# Aggiungi un listener all'input per aggiornare il valore della textvariable (devo fare cosi' per forza perche' senno' sparisce il placeholder)\r\n\t\t\tdef update_variable(e):\r\n\t\t\t\tself.current_input_variable.set(self.input.get())\r\n\r\n\t\t\tself.input.bind(\"<KeyRelease>\", update_variable)\r\n\r\n\t\tself.label.pack(side=\"top\", fill=\"both\")\r\n\t\tself.input.pack(side=\"top\", fill=\"both\")\r\n\r\n\t# Metodi della classe per posizionare il self.container\r\n\tdef pack(self, **kwargs):\r\n\t\tself.container.pack(**kwargs)\r\n\r\n\tdef grid(self, **kwargs):\r\n\t\tself.container.grid(**kwargs)\r\n\r\n\tdef place(self, **kwargs):\r\n\t\tself.container.place(**kwargs)\r\n\r\n\tdef get(self):\r\n\t\treturn self.input.get()\r\n\r\n\r\nclass MainApplication(ctk.CTk):\r\n\tdef __title_menu(self):\r\n\t\tself.title(\"Insulinometro\")\r\n\t\tself.geometry(\"800x600\")\r\n\t\tmenu = ExtendedTitleMenu(master=self)\r\n\r\n\t\tfile_button_container = ctk.CTkFrame(menu, fg_color=\"transparent\")\r\n\t\tfile_button = ctk.CTkButton(file_button_container, text=\"File\", text_color=self.app_theme.primary_text,\r\n\t\t                            fg_color=self.app_theme.transparent, corner_radius=0, command=self.__file_button)\r\n\r\n\t\tdevice_button_container = ctk.CTkFrame(menu, fg_color=\"transparent\")\r\n\t\tdevice_button = ctk.CTkButton(device_button_container, text=\"Device\", text_color=self.app_theme.primary_text,\r\n\t\t                              fg_color=self.app_theme.transparent, corner_radius=0,\r\n\t\t                              command=self.__device_button)\r\n\r\n\t\tbattery_button_container = ctk.CTkFrame(menu, fg_color=\"transparent\")\r\n\t\tbattery_button = ctk.CTkButton(battery_button_container, text=\"\uD83D\uDD0B\", text_color=self.app_theme.primary_text,\r\n\t\t                               fg_color=self.app_theme.transparent, corner_radius=0,\r\n\t\t                               command=self.__battery_button)\r\n\r\n\t\tsignal_button_container = ctk.CTkFrame(menu, fg_color=\"transparent\")\r\n\t\tsignal_button = ctk.CTkButton(signal_button_container, text=\"\uD83D\uDCF6\", text_color=self.app_theme.primary_text,\r\n\t\t                              fg_color=self.app_theme.transparent, corner_radius=0,\r\n\t\t                              command=self.__signal_button)\r\n\r\n\t\tmenu.add_frame(file_button_container)\r\n\t\tmenu.add_frame(device_button_container)\r\n\t\tmenu.add_frame(battery_button_container)\r\n\t\tmenu.add_frame(signal_button_container)\r\n\r\n\tdef __main_frame(self):\r\n\t\tself.main_frame = ctk.CTkFrame(self, fg_color=self.app_theme.secondary_background, corner_radius=0)\r\n\t\tself.main_frame.grid(row=0, column=0, sticky=ctk.NSEW)\r\n\t\t# Sezione dei grafici e dei controlli\r\n\t\tgraph_section_container = ctk.CTkFrame(self.main_frame, fg_color=\"transparent\", corner_radius=0)\r\n\t\tgraph_section_container.pack(side=\"top\", fill=\"both\", expand=True, padx=10, pady=25)\r\n\r\n\t\t# Sezione dei grafici\r\n\t\t# Suddivisione finestra\r\n\t\tplot_container = ctk.CTkFrame(graph_section_container, fg_color=\"transparent\", corner_radius=0)\r\n\t\tplot_container.pack(side=\"left\", fill=\"both\", expand=True)\r\n\r\n\t\tplot_container.columnconfigure(0, weight=1)\r\n\t\tplot_container.columnconfigure(1, weight=1)\r\n\t\tplot_container.columnconfigure(2, weight=1)\r\n\r\n\t\tplot_container.rowconfigure(0, weight=1)\r\n\t\tplot_container.rowconfigure(1, weight=1)\r\n\r\n\t\t# Grafici\r\n\t\tbode1_frame = ctk.CTkFrame(plot_container, fg_color=self.app_theme.element_background, corner_radius=5)\r\n\t\tbode1_frame.grid(row=0, column=0, padx=(0, 5), pady=(0, 5), sticky=ctk.NSEW)\r\n\r\n\t\tbode2_frame = ctk.CTkFrame(plot_container, fg_color=self.app_theme.element_background, corner_radius=5)\r\n\t\tbode2_frame.grid(row=1, column=0, padx=(0, 5), sticky=ctk.NSEW)\r\n\r\n\t\tnyquist_frame = ctk.CTkFrame(plot_container, fg_color=self.app_theme.element_background, corner_radius=5)\r\n\t\tnyquist_frame.grid(row=0, column=1, rowspan=2, columnspan=2, padx=(0, 5), sticky=ctk.NSEW)\r\n\r\n\t\t# Sezione dei controlli\r\n\t\t# Suddivisione finestra\r\n\t\tcontroller_container = ctk.CTkFrame(graph_section_container, fg_color=self.app_theme.transparent,\r\n\t\t                                    corner_radius=5)\r\n\t\tcontroller_container.pack(side=\"left\", fill=\"both\")\r\n\r\n\t\t# Tab view dei controlli (Fixed, Sweep)\r\n\t\tmeasurement_mode_tabview = ExtendedTabView(controller_container,\r\n\t\t                                           fg_color=self.app_theme.element_background,\r\n\t\t                                           text_color=(\r\n\t\t\t                                           self.app_theme.light_gray_text, self.app_theme.primary_text),\r\n\t\t                                           text_color_unselected=self.app_theme.gray_text,\r\n\t\t                                           width=250,\r\n\t\t                                           segmented_button_fg_color=self.app_theme.element_secondary_background,\r\n\t\t                                           segmented_button_selected_color=scale_lightness(\r\n\t\t\t                                           self.app_theme.element_secondary_background, 0.96),\r\n\t\t                                           segmented_button_unselected_color=self.app_theme.element_secondary_background,\r\n\t\t                                           segmented_button_unselected_hover_color=scale_lightness(\r\n\t\t\t                                           self.app_theme.element_secondary_background, 0.95),\r\n\t\t                                           segmented_button_selected_hover_color=scale_lightness(\r\n\t\t\t                                           self.app_theme.element_secondary_background, 0.96),\r\n\t\t                                           segmented_button_font=CTkFont(family=\"Poppins\", size=16,\r\n\t\t                                                                         weight=\"bold\"),\r\n\t\t                                           segmented_button_background_corner_colors=(\r\n\t\t\t                                           self.app_theme.secondary_background,\r\n\t\t\t                                           self.app_theme.secondary_background,\r\n\t\t\t                                           self.app_theme.element_secondary_background,\r\n\t\t\t                                           self.app_theme.element_secondary_background\r\n\t\t                                           ),\r\n\t\t                                           segmented_button_height=40,\r\n\t\t                                           segmented_button_padding_x=(0, 0),\r\n\t\t                                           segmented_button_padding_y=(0, 0),\r\n\r\n\t\t                                           segmented_button_sticky=\"news\",\r\n\t\t                                           segmented_button_row=0,\r\n\r\n\t\t                                           corner_radius=5,\r\n\t\t                                           border_width=0,\r\n\t\t                                           anchor=\"n\"\r\n\t\t                                           )\r\n\t\tmeasurement_mode_tabview.pack(side=\"top\", fill=\"both\")\r\n\r\n\t\tfixed_tab = measurement_mode_tabview.add(\"Fixed\")\r\n\t\tsweep_tab = measurement_mode_tabview.add(\"Sweep\")\r\n\t\tmeasurement_mode_tabview.set(\"Fixed\")\r\n\r\n\t\t# Finestre di input\r\n\t\tinput_container = ctk.CTkFrame(fixed_tab, fg_color=self.app_theme.element_background, corner_radius=5)\r\n\t\tinput_container.pack(side=\"top\", fill=\"both\")\r\n\r\n\t\tfrequency_input = LabelledInput(input_container,\r\n\t\t                                entry_options=LabelledInput.EntryOptions(\r\n\t\t\t                                textvariable=self.frequency_string,\r\n\t\t\t                                placeholder_text=\"Frequenza (Hz)\",\r\n\t\t                                ),\r\n\t\t                                label_options=LabelledInput.LabelOptions(\r\n\t\t\t                                text=\"Frequenza\",\r\n\t\t                                ),\r\n\t\t                                app_theme=self.app_theme\r\n\t\t                                )\r\n\t\tfrequency_input.pack(side=\"top\", fill=\"x\", padx=5, pady=5)\r\n\r\n\t\tmagnitude_input = LabelledInput(input_container,\r\n\t\t                                entry_options=LabelledInput.EntryOptions(\r\n\t\t\t                                textvariable=self.magnitude_string,\r\n\t\t\t                                placeholder_text=\"Ampiezza (mV)\",\r\n\t\t                                ),\r\n\t\t                                label_options=LabelledInput.LabelOptions(\r\n\t\t\t                                text=\"Ampiezza\",\r\n\t\t                                ),\r\n\t\t                                app_theme=self.app_theme\r\n\t\t                                )\r\n\t\tmagnitude_input.pack(side=\"top\", fill=\"x\", padx=5, pady=5)\r\n\r\n\t\t# Pulsanti di controllo\r\n\t\tcontrols_section = ctk.CTkFrame(controller_container, fg_color=self.app_theme.element_background,\r\n\t\t                                corner_radius=5)\r\n\t\tcontrols_section.pack(fill=\"both\", expand=True)\r\n\r\n\t\tbutton_container = ctk.CTkFrame(controls_section, fg_color=\"transparent\")\r\n\t\tbutton_container.pack(anchor=\"s\", side=\"bottom\", fill=\"both\", pady=(0, 10))\r\n\r\n\t\tbutton_container.columnconfigure(0, weight=1)\r\n\t\tbutton_container.columnconfigure(1, weight=1)\r\n\t\tbutton_container.columnconfigure(2, weight=1)\r\n\r\n\t\tstart_button = ctk.CTkButton(button_container, text=\"START\", fg_color=self.app_theme.primary_button,\r\n\t\t                             font=CTkFont(family=\"Poppins\", size=14, weight=\"bold\"),\r\n\t\t                             text_color=self.app_theme.primary_button_text, corner_radius=5,\r\n\t\t                             hover_color=scale_lightness(self.app_theme.primary_button, 0.95),\r\n\t\t                             width=70,\r\n\t\t                             command=self.__start_button)\r\n\t\tstart_button.grid(row=0, column=0)\r\n\r\n\t\tstop_button = ctk.CTkButton(button_container, text=\"STOP\", fg_color=self.app_theme.danger_button,\r\n\t\t                            font=CTkFont(family=\"Poppins\", size=14, weight=\"bold\"),\r\n\t\t                            text_color=self.app_theme.danger_button_text, corner_radius=5,\r\n\t\t                            hover_color=scale_lightness(self.app_theme.danger_button, 0.95),\r\n\t\t                            width=70,\r\n\t\t                            command=self.__stop_button)\r\n\t\tstop_button.grid(row=0, column=1)\r\n\r\n\t\tmarker_button = ctk.CTkButton(button_container, text=\"\uD83D\uDCCC\", fg_color=self.app_theme.warning_button,\r\n\t\t                              text_color=self.app_theme.warning_button_text, corner_radius=5,\r\n\t\t                              hover_color=scale_lightness(self.app_theme.warning_button, 0.95),\r\n\t\t                              width=40,\r\n\t\t                              command=self.__marker_button)\r\n\t\tmarker_button.grid(row=0, column=2)\r\n\r\n\t\tpass\r\n\r\n\tdef __bottom_frame(self):\r\n\t\t# Sezione dati\r\n\t\tself.bottom_frame = ctk.CTkFrame(self, fg_color=self.app_theme.primary_background, corner_radius=0)\r\n\t\tself.bottom_frame.grid(row=1, column=0, sticky=ctk.NSEW)\r\n\r\n\t\tdata_container = ctk.CTkFrame(self.bottom_frame, fg_color=self.app_theme.transparent, corner_radius=0)\r\n\t\tdata_container.pack(side=\"top\", fill=\"both\", expand=True, padx=5, pady=(0, 5))\r\n\r\n\t\t# Tab view dei dati e dei log\r\n\t\ttools_tabview = ExtendedTabView(data_container,\r\n\t\t                                fg_color=self.app_theme.transparent,\r\n\t\t                                text_color=(self.app_theme.light_gray_text, self.app_theme.primary_text),\r\n\t\t                                text_color_unselected=self.app_theme.gray_text,\r\n\t\t                                text_hover_color=self.app_theme.secondary_text,\r\n\t\t                                segmented_button_fg_color=self.app_theme.primary_background,\r\n\t\t                                segmented_button_selected_color=self.app_theme.primary_background,\r\n\t\t                                segmented_button_unselected_color=self.app_theme.primary_background,\r\n\t\t                                segmented_button_unselected_hover_color=self.app_theme.primary_background,\r\n\t\t                                segmented_button_selected_hover_color=self.app_theme.primary_background,\r\n\t\t                                segmented_button_font=CTkFont(family=\"Poppins\", size=16, weight=\"bold\"),\r\n\t\t                                corner_radius=5,\r\n\t\t                                button_padding_x=(0, 50),\r\n\t\t                                selected_style=\"underline\",\r\n\t\t                                selected_style_color=self.app_theme.primary_text,\r\n\t\t                                anchor=\"w\",\r\n\t\t                                )\r\n\t\ttools_tabview.pack(side=\"top\", fill=\"both\", anchor=\"n\", padx=30)\r\n\t\tdata_tab = tools_tabview.add(\"Data\")\r\n\t\tlogs_tab = tools_tabview.add(\"Logs\")\r\n\t\ttools_tabview.set(\"Data\")\r\n\r\n\t\tloading_bar_container = ctk.CTkFrame(tools_tabview.segmented_button, fg_color=self.app_theme.transparent,\r\n\t\t                                     corner_radius=0)\r\n\t\tloading_bar_container.grid(row=0, column=2, sticky=\"nswe\")\r\n\t\tloading_bar = ctk.CTkProgressBar(loading_bar_container, corner_radius=5, width=400,\r\n\t\t                                 fg_color=self.app_theme.light_gray_text,\r\n\t\t                                 progress_color=self.app_theme.primary_text)\r\n\t\tloading_bar.pack(side=\"left\", anchor=\"c\")\r\n\r\n\t\t# Tabella dei log\r\n\t\tlogs_frame = ctk.CTkFrame(logs_tab, fg_color=self.app_theme.element_background, corner_radius=5)\r\n\t\tlogs_frame.pack(side=\"top\", fill=\"both\", expand=True)\r\n\r\n\t\t# Tabella dei dati\r\n\t\ttable_frame = ctk.CTkFrame(master=data_tab, fg_color=self.app_theme.element_background,\r\n\t\t                           corner_radius=0)\r\n\t\ttable_frame.pack(side=\"top\", fill=\"both\", expand=True)\r\n\r\n\t\ttable_frame.columnconfigure(0, weight=1)\r\n\t\ttable_frame.columnconfigure(1, weight=1)\r\n\t\ttable_frame.columnconfigure(2, weight=1)\r\n\r\n\t\ttable_frame.rowconfigure(0, weight=1)\r\n\t\ttable_frame.rowconfigure(1, weight=1)\r\n\t\ttable_frame.rowconfigure(2, weight=1)\r\n\r\n\t\tfrequency_label = ctk.CTkLabel(table_frame, text=\"Frequenza\", text_color=\"black\")\r\n\t\tfrequency_label.grid(row=0, column=0, sticky=\"nsew\")\r\n\r\n\t\tphase_label = ctk.CTkLabel(table_frame, text=\"Fase\", text_color=\"black\")\r\n\t\tphase_label.grid(row=0, column=1, sticky=\"nsew\")\r\n\r\n\t\tmagnitude_label = ctk.CTkLabel(table_frame, text=\"Ampiezza\", text_color=\"black\")\r\n\t\tmagnitude_label.grid(row=0, column=2, sticky=\"nsew\")\r\n\r\n\t\tdatas1_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas1_text.grid(row=1, column=0, sticky=\"nsew\")\r\n\t\tdatas2_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas2_text.grid(row=1, column=1, sticky=\"nsew\")\r\n\t\tdatas3_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas3_text.grid(row=1, column=2, sticky=\"nsew\")\r\n\r\n\t\tdatas4_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas4_text.grid(row=2, column=0, sticky=\"nsew\")\r\n\t\tdatas5_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas5_text.grid(row=2, column=1, sticky=\"nsew\")\r\n\t\tdatas6_text = ctk.CTkLabel(table_frame, text=\"Data\", text_color=\"black\")\r\n\t\tdatas6_text.grid(row=2, column=2, sticky=\"nsew\")\r\n\t\tpass\r\n\r\n\tdef __init__(self, app_theme: AppTheme = AppTheme()):\r\n\t\tsuper().__init__(fg_color=app_theme.primary_background)\r\n\t\tself.app_theme = app_theme\r\n\r\n\t\tself.frequency_string = ctk.StringVar()\r\n\t\tself.magnitude_string = ctk.StringVar()\r\n\r\n\t\t# Menu titolo finestra\r\n\t\tself.__title_menu()\r\n\r\n\t\t# Suddivisione griglia layout finestra\r\n\t\tself.rowconfigure(0, weight=2)\r\n\t\tself.rowconfigure(1, weight=1)\r\n\t\tself.columnconfigure(0, weight=100)\r\n\r\n\t\t# Creazione finestre\r\n\t\tself.__main_frame()\r\n\t\tself.__bottom_frame()\r\n\r\n\t# Funzioni dei pulsanti\r\n\tdef __start_button(self):\r\n\t\tprint(f\"Frequenza: {self.frequency_string.get()} \\nAmpiezza: {self.magnitude_string.get()}\")\r\n\r\n\tdef __stop_button(self):\r\n\t\tprint(\"stop button\")\r\n\r\n\tdef __marker_button(self):\r\n\t\tprint(\"marker button\")\r\n\r\n\tdef __logs_button(self):\r\n\t\tprint(\"logs button\")\r\n\r\n\tdef __data_button(self):\r\n\t\tprint(\"data button\")\r\n\r\n\tdef __file_button(self):\r\n\t\tprint(\"file button\")\r\n\r\n\tdef __device_button(self):\r\n\t\tprint(\"device button\")\r\n\r\n\tdef __battery_button(self):\r\n\t\tprint(\"battery button\")\r\n\r\n\tdef __signal_button(self):\r\n\t\tprint(\"signal button\")\r\n\r\n\tdef __fixed_button(self):\r\n\t\tprint(\"fixed button\")\r\n\r\n\tdef __sweep_button(self):\r\n\t\tprint(\"sweep button\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\tapplication = MainApplication(AppTheme())\r\n\tapplication.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main.py b/app/main.py
--- a/app/main.py	(revision a79c51f72b6c72d39c98640030800cd307d42cce)
+++ b/app/main.py	(date 1729423790550)
@@ -1,10 +1,9 @@
-import time
-import tkinter.font
-from tkinter import Widget
 from typing import Union, Optional, Tuple, Callable, Any
 
 import customtkinter as ctk
 from CTkMenuBar import CTkTitleMenu
+from PIL import ImageFont, Image, ImageDraw
+
 from customtkinter import CTkFrame, CTkImage, CTkEntry, CTkFont, CTkTabview, CTkButton, CTkSegmentedButton, CTkCanvas
 import colorsys
 
@@ -73,6 +72,10 @@
 		pass
 
 
+def color_str_to_hex(color: str) -> int:
+	return int(color[1:], 16)
+
+
 # Classe estesa per il menu personalizzato, per qualche strano motivo quello di base supporta solo il testo 🍡
 class ExtendedTitleMenu(CTkTitleMenu):
 	def __init__(self,
@@ -205,7 +208,8 @@
 
 	def _bind_button_events(self, button: CTkButton):
 		"""Bind hover and click events for a button."""
-		button.bind("<Enter>", lambda e: button.configure(text_color=self._text_hover_color) if self._text_hover_color else None)
+		button.bind("<Enter>",
+		            lambda e: button.configure(text_color=self._text_hover_color) if self._text_hover_color else None)
 		button.bind("<Leave>", lambda e: button.configure(text_color=self._get_button_text_color(button)))
 		button.bind("<Button-1>", lambda e: self._on_button_click(button))
 
@@ -229,7 +233,8 @@
 
 		canvas = self._button_underlines.get(button)
 		if not canvas:
-			canvas = CTkCanvas(button, width=button.winfo_reqwidth(), height=self._underline_width, highlightthickness=0)
+			canvas = CTkCanvas(button, width=button.winfo_reqwidth(), height=self._underline_width,
+			                   highlightthickness=0)
 			self._button_underlines[button] = canvas
 
 		# Create and place underline
@@ -259,17 +264,16 @@
 		self._initialize_buttons()
 
 
-
 # Elementi
 
-# def emoji(emoji, size=32):
-# 	font = ImageFont.truetype("seguiemj.ttf", size=int(size / 1.5))
-# 	img = Image.new("RGBA", (size, size), (0, 0, 0, 0))
-# 	draw = ImageDraw.Draw(img)
-# 	draw.text((size / 2, size / 2), emoji,
-# 	          embedded_color=True, font=font, anchor="mm")
-# 	img = CTkImage(img, size=(size, size))
-# 	return img
+def emoji(emoji, size=32):
+	font = ImageFont.truetype("seguiemj.ttf", size=int(size))
+	img = Image.new("RGBA", (size, size), (0, 0, 0, 0))
+	draw = ImageDraw.Draw(img)
+	draw.text((size / 2, size / 2), emoji,
+	          embedded_color=True, font=font, anchor="mm")
+	img = CTkImage(img, size=(size, size))
+	return img
 
 
 class LabelledInput(CTkEntry):
@@ -407,35 +411,27 @@
 	def __title_menu(self):
 		self.title("Insulinometro")
 		self.geometry("800x600")
-		menu = ExtendedTitleMenu(master=self)
-
-		file_button_container = ctk.CTkFrame(menu, fg_color="transparent")
-		file_button = ctk.CTkButton(file_button_container, text="File", text_color=self.app_theme.primary_text,
-		                            fg_color=self.app_theme.transparent, corner_radius=0, command=self.__file_button)
 
-		device_button_container = ctk.CTkFrame(menu, fg_color="transparent")
-		device_button = ctk.CTkButton(device_button_container, text="Device", text_color=self.app_theme.primary_text,
-		                              fg_color=self.app_theme.transparent, corner_radius=0,
-		                              command=self.__device_button)
+		title_cover = ctk.CTkFrame(self, fg_color=self.app_theme.element_background, corner_radius=0, height=10)
+		title_cover.grid(row=0, column=0, sticky=ctk.EW)
 
-		battery_button_container = ctk.CTkFrame(menu, fg_color="transparent")
-		battery_button = ctk.CTkButton(battery_button_container, text="🔋", text_color=self.app_theme.primary_text,
-		                               fg_color=self.app_theme.transparent, corner_radius=0,
-		                               command=self.__battery_button)
-
-		signal_button_container = ctk.CTkFrame(menu, fg_color="transparent")
-		signal_button = ctk.CTkButton(signal_button_container, text="📶", text_color=self.app_theme.primary_text,
-		                              fg_color=self.app_theme.transparent, corner_radius=0,
-		                              command=self.__signal_button)
-
-		menu.add_frame(file_button_container)
-		menu.add_frame(device_button_container)
-		menu.add_frame(battery_button_container)
-		menu.add_frame(signal_button_container)
+		menu = ExtendedTitleMenu(self, app_theme=self.app_theme,
+		                         title_bar_color=color_str_to_hex(self.app_theme.element_background),
+		                         )
+		menu.add_cascade("",
+		                 command=self.__file_button,
+		                 font=CTkFont(family="Poppins", size=14, weight="bold"),
+		                 text_color=self.app_theme.primary_text,
+		                 fg_color=self.app_theme.element_background,
+		                 bg_color=self.app_theme.transparent,
+		                 hover_color=self.app_theme.element_background,
+		                 corner_radius=0,
+		                 image=emoji("📁", 16),
+		                 )
 
 	def __main_frame(self):
 		self.main_frame = ctk.CTkFrame(self, fg_color=self.app_theme.secondary_background, corner_radius=0)
-		self.main_frame.grid(row=0, column=0, sticky=ctk.NSEW)
+		self.main_frame.grid(row=1, column=0, sticky=ctk.NSEW)
 		# Sezione dei grafici e dei controlli
 		graph_section_container = ctk.CTkFrame(self.main_frame, fg_color="transparent", corner_radius=0)
 		graph_section_container.pack(side="top", fill="both", expand=True, padx=10, pady=25)
@@ -576,7 +572,7 @@
 	def __bottom_frame(self):
 		# Sezione dati
 		self.bottom_frame = ctk.CTkFrame(self, fg_color=self.app_theme.primary_background, corner_radius=0)
-		self.bottom_frame.grid(row=1, column=0, sticky=ctk.NSEW)
+		self.bottom_frame.grid(row=2, column=0, sticky=ctk.NSEW)
 
 		data_container = ctk.CTkFrame(self.bottom_frame, fg_color=self.app_theme.transparent, corner_radius=0)
 		data_container.pack(side="top", fill="both", expand=True, padx=5, pady=(0, 5))
@@ -660,15 +656,18 @@
 		self.frequency_string = ctk.StringVar()
 		self.magnitude_string = ctk.StringVar()
 
-		# Menu titolo finestra
-		self.__title_menu()
+
 
 		# Suddivisione griglia layout finestra
-		self.rowconfigure(0, weight=2)
-		self.rowconfigure(1, weight=1)
-		self.columnconfigure(0, weight=100)
+		self.rowconfigure(0, weight=0)
+		self.rowconfigure(1, weight=2)
+		self.rowconfigure(2, weight=1)
+
+		self.columnconfigure(0, weight=1)
 
 		# Creazione finestre
+
+		self.__title_menu()
 		self.__main_frame()
 		self.__bottom_frame()
 
